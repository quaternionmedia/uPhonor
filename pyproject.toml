[project]
name = "uphonor"
description = "Python CFFI bindings for uPhonor real-time audio looping system"
readme = "README.md"
requires-python = ">=3.8"
dependencies = [
    "cffi>=1.14.0",
]
authors = [
    {name = "Quaternion Media", email = "holophonor@quaternion.media"}
]
license = {text = "MIT"}
keywords = ["audio", "looping", "midi", "real-time", "pipewire"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Multimedia :: Sound/Audio :: MIDI",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "black>=22.0.0",
    "mypy>=0.900",
    "pytest>=6.0.0",
    "ruff>=0.1.0",
]
examples = [
    "python-rtmidi>=1.4.0",
]

[project.scripts]
uphonor-python = "uphonor.main:main"
uphonor-examples = "examples:main"
uphonor-integration = "holophono_integration:main"

[project.urls]
Homepage = "https://github.com/quaternionmedia/uPhonor"
Repository = "https://github.com/quaternionmedia/uPhonor"
Documentation = "https://github.com/quaternionmedia/uPhonor/blob/main/PYTHON_BINDINGS.md"
Issues = "https://github.com/quaternionmedia/uPhonor/issues"

[build-system]
requires = [
    "pdm-backend",
    "cffi>=1.14.0",
]
build-backend = "pdm.backend"

[tool.pdm]
version = {source = "file", path = "uphonor/_version.py"}
includes = ["uphonor", "*.py", "*.h", "*.c"]

[tool.pdm.build]
# Custom build hook for CFFI
includes = ["uphonor/**/*.py", "*.py", "*.h", "*.c"]
excludes = [
    "**/.git/**",
    "**/__pycache__/**", 
    "**/build/**",
    "**/.pytest_cache/**",
]

# CFFI build configuration  
[tool.cffi]
source_dir = "."
include_dirs = ["."]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  __pycache__
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"examples.py" = ["E402"]  # Allow imports after other code in examples
"test_*.py" = ["E402"]    # Allow imports after other code in tests

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "_uphonor_cffi"
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["test_bindings.py"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]
